name: Úvod do skriptování
goals: |
  Cílem této lekce je zvládnout základ programování: vytváření sekvencí příkazů — algoritmů.
reading: |
  **Úvodem do skriptování je ve skutečnosti celý kurz**: značkovací jazyky pomáhají chápat strukturování dat a později ještě s tabulkovými procesory a databázemi přičichneme k funkcím a proměnným z jiného úhlu.

  > **Pozn.:** Nelekněte se počtu úkolů v této lekci: některé úkoly jsou rozdělené na dva, jiné jsou velmi jednoduché nebo vyloženě určené pro „hraní si“. Pokud si místy budete připadat „jako ve školce“, beru to jako úspěch.
  >
  > Pokud by vám kdykoli připadalo, že vidíte příliš mnoho nových informací najednou, je to v pořádku. Je to nové prostředí a působí cize — soustřeďte se na detaily a zkoušejte měnit kód a sledovat, co se stane v okénku nebo v konzoli. Postupně si zvyknete na výrazové prostředky v kódu (členění řádků, různé závorky, čísla a písmena atp.) a bude to lepší.
  
  Při učení budeme používat Javascript — jazyk, který funguje v internetových prohlížečích. Díky tomu si nemusíte nic instalovat, vše si vyzkoušíte přímo v e-learningu. Informaci o tom, že užíváte Javascript, využijete především v případě, že si budete chtít něco [dohledat na Googlu](https://www.google.cz/search?q=is+javascript+awesome).
  
  Krom samotného Javascriptu využijeme knihovnu postavenou na konceptu „želví grafiky“. Ta vychází z programovacího jazyka [Logo](https://en.wikipedia.org/wiki/Logo_(programming_language)), který letos slaví padesátku (ano, byl vytvořen v roce 1967 — v době, kdy počítače zabíraly celé místnosti).
rubrics:
  - "Pokud se v odpovědích objevují výše neokomentované chyby, upřesněte, kde je autor/ka dělá. Pokuste se to vysvětlit problém tak, aby to pomohlo v pochopení problematiky."
preface: |
  Úvodů do programování v javascriptu a programování obecně je na [internetu mnoho](http://google.com/search?q=úvod+do+javascriptu). Podstatné je, že pro naši výuku nebudete potřebovat příliš mnoho znalostí — podstatné bude, abyste si zažili způsob práce se skripty, nějaké ty termíny a syntaxi. Zpočátku si nemusíte všímat, jak k sobě pasují různé závorky — příkazy můžete kopírovat a měnit pouze parametry.
  
  **Nejlepším způsobem, jak se skriptování naučit, je experimentování.** Když v kódu uděláte syntaktickou chybu, přímo v editoru se vám objeví varování (u čísel řádků se objeví nějaký škaredý symbol, na který můžete najet myší). Hned v prvních několika úlohách se naučíme i lehce pokročilé lovení chyb (debuggování), abyste se neztratili, když dojde k problémům. 
  
  Pokud se někdy budete programování věnovat profesionálně, budete si muset nastudovat detaily programovacího jazyka a používaných knihoven (tak se říká *balíkům funkcí, které napsal někdo jiný*). Když se ale učíte základy, nejlepší je začít postupným okoukáváním kousků kódu a skládáním částí příkladů dohromady. Touto cestou půjdeme v našem kurzu.
  
  Pokud nebudete vědět, jak si s něčím poradit, hledejte pomoc v diskusním fóru.
  
  > **Pozn.:** Některé úkoly po vás budou vyžadovat, abyste pracovali s komentáři v kódu. (Možná si vybavíte obdobné `<!-- komentáře v HTML -->` — jde o kusy kódu, které nejsou zpracovány.) 
  >
  > Komentáře v Javascriptu jsou dvojího druhu: 
  >
  > - jednořádkové komentáře můžete psát vždy za dvě lomítka na konci řádku: 
  >
  > `var x = 1; // komentář`
  >
  > - víceřádkové komentáře můžete psát pomocí lomítek a hvězdiček takto: 
  >
  > `/* toto je`  
  > `víceřádkový komentář */`
    
---
bloom: apply
input: javascript
vars:
  code:
    - "var number == 0"
    - "var num ber = 0;"
    - "number = 0;"
    - "console.log(x * 10);"
    - "window.alert(\"zprava);"
comments: 3
questions: |
  V prvních třech úkolech se budeme věnovat chybám. Vychytávání chyb je důležitou součástí programování — díky tomu, že počítačový program můžete spustit mnohokrát, nemusíte se bát dělat chyby. **Zkuste to a když to nevyjde, zkusíte to znovu.** Při psaní i po spuštění můžete objevit chyby — některé možná trochu očekáváte a jiné vás překvapí.

  Předvyplněný kód ve vstupním poli prvního úkolu obsahuje syntaktickou chybu. Vyhledejte si chybu pomocí Google a upravte kód tak, aby neházel chybu (jinak, než prostým vymazáním :)). Do komentáře popište, jak jste postupovali a z jakého zdroje jste získali potřebné informace.
prefill: "%code%"
rubrics:
  - checklist: ''
    items:
      - Chyba je opravena.
      - Chyba je popsána.
      - Jsou popsány zdroje (a příp. vyhledávací dotazy), díky kterým autor/ka k řešení došel/došla.
---
bloom: apply
input: javascript
comments: 5
questions: |
  Předvyplněný kód opět obsahuje chybu. Tato chyba není vidět přímo v editoru, který umí upozornit jen na chyby v syntaxi používaného jazyka (Javascriptu). Tato chyba ale spočívá v tom, že naše elektronická želva zatím nemá určitou dovednost.
  
  **Vyhledejte pomocí Googlu způsob, [jak ve svém prohlížeči spustíte konzoli s chybami Javascriptu](https://www.google.cz/search?q=how+to+open+javascript+error+console+in+my+browser) a otevřete si ji.** Postup vlastními slovy krátce shrňte do komentáře.
      
  Spusťte kód a přepište poslední chybové hlášení do pole pro komentář (mělo by se týkat funkce `turtle.dance()`). Následně udělejte screenshot vašeho prohlížece s javascriptovou konzolí, který nahrajte do přílohy v následujícím úkolu.
  
  **Pokud se v dalších úkolech setkáte s nefunkčností vašeho kódu a program zdánlivě nic nedělá, hledejte odpověď nejprve ve výpisu chyb a pracujte s chybovým hlášením v případné další diskusi. Pokud kód „nic nědělá“, nejspíše došlo k chybě anebo možná kód neobsahuje žádný příkaz, který by se navenek projevil.**
prefill: |
  var turtle = {};
  turtle.dance();
rubrics:
  - checklist: ''
    items:
      - Postup je popsaný.
      - Postup platí pro konkrétní (jmenovaný) prohlížeč.
---
bloom: apply
input: file
questions: |
  Zde nahrajte screenshot z předchozího úkolu.
rubrics:
  - checklist: ''
    items:
      - Screenshot je nahraný.
      - Na screenshotu je viditelná javascriptová konzole s chybou.
---
bloom: apply
input: javascript
questions: |
  Krom toho, že se vám v konzoli zobrazují chyby, můžete si do ní vypsat něco i sami. Když v kódu použijete volání `console.log(color)`, do konzole se vypíše obsah proměnné `color`. Vypisování obsahu proměnných často pomůže zjistit, že je něco jinak, než jste si mysleli.
  
  Vyzkoušejte si to spuštěním kódu v příkladu. Příkaz můžete použít vícekrát, postupně vypíše všechny požadované hodnoty do konzole.
  
  Doplňte kód tak, aby se do konzole vypsal text „A teď mám dost.“ a pořiďte screenshot prohlížeče s konzolí, který nahrajte do přílohy v následujícím úkolu.
  
  > **Tip:** Vypsat do konzole si můžete nejen čísla a texty, ale i jiné datové typy — jako jsou třeba objekty. Můžete to vyzkoušet i se želvou v následujících příkladech.
prefill: |
  var pocetKnedliku = 3; // do proměnné uložím trojku
  console.log('Nejdřív mám jen ' + pocetKnedliku + ' knedlíky.');

  pocetKnedliku = pocetKnedliku + 11; // přidám si 11 knedlíků
  console.log('A nakonec mám ' + pocetKnedliku + ' knedlíků.');
rubrics:
  - checklist: ''
    items:
      - Kód je správně doplněný.
      - Do konzole se vypisuje požadovaný text.
---
bloom: apply
input: file
questions: |
  Zde nahrajte screenshot z předchozího úkolu.
rubrics:
  - checklist: ''
    items:
      - Screenshot je nahraný.
      - Na screenshotu je viditelná javascriptová konzole a v ní je vypsaný požadovaný text.
---
bloom: understand
input: javascript
questions: |
  Při programování pracujete s daty a příkazy. Jednoduché datové hodnoty jsou např. čísla, řetězce (řady písmen) nebo logické hodnoty (pravda/nepravda) — pro ukládání různých hodnot dat se užívají různé datové typy. 

  Způsob uložení hodnot je podstatný — například pokud byste chtěli seřadit státy dle počtu obyvatel, bude se vám hodit spíše řazení dle velikosti celého čísla (lineární — typické pro čísla, např. *1, 2, 11, 23, 45*) než řazení dle posloupnosti znaků (též lexikografické — typické pro řetězce, např. *1, 11, 2, 23, 45*). V různých jazycích se tyto věci drobně i zásadně liší, nicméně v tomto kurzu by mělo stačit odlišit čísla a řetězce.

  Tyto **hodnoty** můžete pojmenovat a skrze tyto názvy k nim pak přistupovat — takto můžete vytvářet **proměnné**. Následující **příkaz** ukládá hodnotu `3` do proměnné nazvané `cislo`:

  `var cislo = 3; // každý příkaz je ukončený středníkem`

  Kód v příkladu níže ukazuje více takových přiřazení a následně používá příkaz `console.log()` k tomu, aby proměnnou vypsal do konzole (té, v níž jste v předchozích příkladech hledali chyby). Kromě toho tam vidíte i dvě užití operátoru `+` (plus — v prvním případě jím sčítáme dvě čísla (rozumné) a ve druhém spojujeme dva řetězce) a jedno užití operátoru `==` (rovná se).

  > **Pozn.:** Dejte si pozor na rozdíl mezi `=` (operátor přiřazení, vkládá hodnotu do proměnné) a `==` (operátor porovnávání hodnot, vrací `true`/`false`).

  Projděte si [úvodní kapitolku z knihy Eloquent Javascript](https://eloquentjavascript.net/01_values.html), která podrobněji vysvětluje hodnoty, datové typy a operátory.

  ### Zadání

  Zkuste si kód spustit a pozorujte, co vypisuje v konzoli. Následně připište alespoň dalších 20 řádků kódu a vytvořte zde nové hodnoty a proměnné, použijte alespoň tři další operátory a výsledky vypište do konzole. Zkuste zachytit nějakou reálnou datovou strukturu (záměr popište do komentáře v kódu).
prefill: |
  var a = 5;
  var b = 3.14;
  var c = a + b;
  console.log('číslo', c);

  var word1 = "ahoj";
  var word2 = "světe";
  var words = word1 + " " + word2;
  console.log('řetězec', words);

  var x = true;
  var y = false;
  var z = a == b;
  console.log('logická hodnota', z);
rubrics:
  - checklist: ''
    items:
      - Je doplněno 20 (neprázdných) řádků kódu.
      - V doplněném kódu jsou použity alespoň tři různé operátory, které nebyly v původním kódu.
      - V doplněném kódu je několik volání `console.log()`, které vypisují jiné hodnoty než `undefined` nebo `null`.
      - V komentáři je uvedeno, jaká data se autor/ka snaží zachytit.
---
bloom: understand
input: javascript
questions: |
  Jednotlivé hodnoty už zvládáme, ale co se složitější strukturou? V HTML už umíme využívat elementy jako je seznam — uvnitř seznamu `ul` najdeme položky `li`. Při skriptování můžeme velmi podobně využívat pole a objekty. Pole jsou řady očíslovaných hodnot (`var coffeeDayCounts = [11, 5, 39]`) a objekty jsou hromádky pojmenovaných hodnot (`var prices = { coffee: 45, toast: 70 }`).

  K hodnotám přistupujeme pomocí názvu proměnné a hranatých závorek, tedy u pole `coffeeDayCounts[0]` nebo u objektu `prices['coffee']`. Pokud známe přesný název, můžeme u objektů použít i tzv. tečkovou notaci a napsat `prices.coffee`.

  Projděte si první polovinu (alespoň po titulek „Mutability“) [čtvrté kapitolky z knihy Eloquent Javascript](https://eloquentjavascript.net/04_data.html), která podrobněji vysvětluje práci s poli a objekty (kapitolka *Methods* se týká funkcí, ke kterým se dostaneme níže, ale nevadí, když na ni mrknete už teď). 

  ### Zadání

  Obdobně jako minule si vyzkoušejte, jak pracuje předpřipravený skript (pozorujte jeho výsledky v konzoli). Následně doplňte alespoň 20 dalších řádků, ve kterých jsou vytvářena a používána pole a objekty a jejich hodnoty jsou vypisovány do konzole. Zkuste zachytit nějakou reálnou datovou strukturu (záměr popište do komentáře v kódu).
prefill: |
  var coffeeDayCounts = [11, 5, 39];
  var prices = { coffee: 45, toast: 70 };

  console.log(coffeeDayCounts[0]); // pole je číslováno od nuly
  console.log(prices["coffee"]);
  console.log(prices.coffee);

  // s hodnotami můžeme dělat další operace
  var firstDayCoffee = coffeeDayCounts[0] * prices.coffee;
  console.log("cena kafe za 1. den", firstDayCoffee);

  var shoppingList = ['jablko', 'kafe', 'mléko'];
  
  // pole mají speciální funkce, pomocí 
  // nichž se dají dělat zajímavé věci
  // - například spojit celé pole do řetězce
  console.log(shoppingList.join(' a '));
  
  // nebo u každé položky spustit kód
  shoppingList.forEach(function(item, index) { 
    console.log(item, '(pozice č. ' + index + ')'); 
  });
rubrics:
  - checklist: ''
    items:
      - Je doplněno 20 neprázdných řádků kódu.
      - V doplněném kódu se pracuje s novými poli.
      - V doplněném kódu se pracuje s novými objekty.
      - V komentáři je uvedeno, jaká data se autor/ka snaží zachytit.
---
bloom: apply
input: turtle
questions: |
  A teď už jdeme programovat něco, co se hýbe — krom dat se teď mrkneme blíže i na samotné příkazy. Úvodní text je poměrně dlouhý, mrkněte průběžně i na skript a spouštějte si ho. (Během čtení můžete zavřít konzoli, pokud vám zavazí.)
  
  ### Vlastnosti a metody
  
  Pro začátek budeme používat želvu (objekt), kterou si uložíme do proměnné `turtle` (ale mohli bychom ji pojmenovat i jinak, třeba krátce `t`). Tento objekt má mj. tyto vlastnosti (tzn. své vlastní proměnné):
  
  - `penDown` — pokud je `true`, zanechává za sebou želva čáru, pokud je `false`, želva jen tak pobíhá
  - `color` — obsahuje označení barvy (např. `'red'` nebo `#FF6600`), které definuje barvu zanechávané čáry
  
  Vlastnosti můžeme upravovat voláním na objektu, např. takto: `turtle.penDown = true;` nebo `turtle.color = 'red'`.
  
  Želva má také několik metod (definovaných funkcí), které umožňují jednoduše naprogramovat její chování:
    
  - `turtle.forward(px)` — „jdi o `px` pixelů dopředu“
  - `turtle.back(px)` — „jdi o `px` pixelů dozadu“
  - `turtle.right(deg)` — otoč se o `deg` doprava
  - `turtle.left(deg)` — otoč se o `deg` doleva
  
  Metody voláme jménem a do závorky uvádíme parametry — zmíněné metody mají vždy jen jeden parametr, příkladem může být otočka doprava o 90 stupňů: `turtle.right(90);`.
  
  ### Parametry
  
  Asi tušíte, že `px` může být nějaké číslo. Obrazovka mívá na šířku něco mezi jedním a dvěma tisíci pixelů. Okénko, v němž vidíte želvu, má na výšku 400 pixelů (šířka se může lišit dle vašeho monitoru). Pokud tedy řeknete želvě, aby šla 1000 pixelů dopředu, uteče vám mimo obraz.
  
  Při otočkách budete potřebovat zadávat úhly (`deg`). Důležité číslo je `360` — tolik stupňů je v kruhu. Výhoda počítače je, že nemusíte počítat úhly. Z paměti asi víte, že čtvrtina celého kruhu je `90` stupňů, ale v počítači stačí napsat `360/4`.

  > **Nečekaně dobrý tip:** Pokud čtyřikrát zabočíte o 360/4 stupňů, je to jako byste se otočili o 360 stupňů.
  
  ### Hurá do toho
  
  To je prozatím všechno. Níže vidíte jednoduchý program, který si můžete spustit kliknutím na tlačítko „Spustit kód“.
  
  > **Pozn.:** Proč želva? Jde o pomůcku, která umožňuje představit si, jak program postupně probíhá v počítači. Krok za krokem si můžete představit, jak želva chodí — a nakreslit si to na papír anebo klidně i odkrokovat. Pokud zvládnete hrubý nástřel a želva chodí přibližně tam, kam chcete, můžete program dále spouštět bez animace (namísto `run.animate()` použijte funkci `run.print()`) — a rychle ladit detaily.
  
  ### Schola ludus
  
  Vyzkoušejte si, jak se mění pohyby želvy, když měníte předepsaný skript. Měňte hodnoty (které číslo označuje barvu? které úhel nebo délku?), přidávejte příkazy, nastavujte barvu (zkuste si na webu najít, jak se tvoří RGB řetězce jako třeba `"#FF0080"`. Zkuste si něco nakreslit.

  > **Tip:** Úvodní nastavení na řádcích 1–7 spíše neměňte, ale zbytek měňte libovolně. Při psaní kódu dejte pozor na chybová hlášení přímo v editoru ale i v konzoli (zejména pokud se děje něco divného). Původní skript si můžete kdykoli vyvolat pomocí tlačítka, které najdete níže.

  **Až se trochu vyřádíte,** upravte původní skript tak, aby kreslil čtverec s oběma úhlopříčkami, a opakující se literály (hodnoty přímo vepsané v kódu) uvnitř metody `p.setup` nahraďte vhodně nazvanými proměnnými.
prefill: |
  var turtle, run; // deklarace proměnných
  var size = toy.measure(); // měření prostoru

  // úvodní nastavení
  p.setup = function() {
    p.createCanvas(size.w, size.h); // plátno
    p.angleMode(p.DEGREES); // úhly jsou ve stupních
    
    turtle = new Turtle(p); // tady se vyrábí želva
    
    // plán želvího běhu
    turtle.forward(150); 
    turtle.right(90);
    turtle.forward(150); 
    turtle.right(90);
    turtle.forward(150); 
    turtle.right(90);
    turtle.forward(150); 
    
    // úhlopříčka: všimněte si, že nemusím nic 
    // počítat — stačí vložit čísla do vzorce
    var diagonal = Math.pow(150*150 + 150*150, 1/2);
    turtle.right(90 + 90/2);
    turtle.forward(diagonal); 

    turtle.right(720); // závěrečný taneček

    run = turtle.getRun(); // export běhu
  };

  // logika kreslení
  p.draw = function() {
    p.background(200); // zkuste změnit číslo
    run.animate(2); // zkuste změnit číslo
  };
rubrics:
  - checklist: ''
    items:
      - Skript kreslí čtverec s oběma úhlopříčkami.
      - Opakující se literály uvnitř metody `p.setup` jsou nahrazeny proměnnými.
---
bloom: apply
input: turtle
vars:
  shape: [trojúhelník, pětiúhelník, šestiúhelník, sedmiúhelník, osmiúhelník, devítiúhelník, desetiúhelník]
questions: |
  V předvyplněném kódu želva kreslí čtverec. Upravte kód tak, aby kreslila %shape%.
prefill: |
  var turtle, run, size = toy.measure();

  p.setup = function() {
    p.createCanvas(size.w, size.h);
    p.angleMode(p.DEGREES);

    turtle = new Turtle(p);
    run = turtle.getRun();
    turtle.color = 'white';

    turtle.forward(100); turtle.right(360/4);
    turtle.forward(100); turtle.right(360/4);
    turtle.forward(100); turtle.right(360/4);
    turtle.forward(100); turtle.right(360/4);

    turtle.right(720);
  };

  p.draw = function() {
    p.background('purple');
    run.animate(3);
  };
rubrics:
  - checklist: ''
    items:
      - Želva kreslí požadovaný mnohoúhelník.
---
bloom: apply
input: turtle
questions: |
  Zkopírujte si kód z předchozí úlohy a namísto mnohoúhelníku nakreslete hvězdičku o **stejném nebo dvojnásobném** počtu cípů.
  
  > **Tip:** Pokud se zaseknete, nakreslete si na papír (pomalu) pěticípou nebo šesticípou hvězdu (způsob se trochu liší). Nejspíš jste to už někdy zkoušeli — některé hvězdy je možné nakreslit pomocí jednoho úhlu, u jiných budete potřebovat dva.
rubrics:
  - checklist: ''
    items:
      - Želva kreslí hvězdu.
      - Výsledkem je hvězda o požadovaném počtu cípů.
---
bloom: remember
count: 2
allowRepeat: question
vars:
  term:
    - "pojem **programování**"
    - "pojem **program**"
    - "pojem **skriptování**"
    - "pojem **skript**"
    - "pojem **javascript**"
    - "pojem **programovací jazyk**"
    - "jak snadno vygooglit něco o javascriptu"
    - "jak snadno vygooglit něco o programování"
    - "jak snadno vygooglit něco o skriptování"
    - "**objektově orientované programování**"
    - "pojem **třída** v kontextu objektově orientovaného programování"
    - "pojem **metoda** v kontextu objektově orientovaného programování"
    - "pojem **objekt** v kontextu objektově orientovaného programování"
    - "pojem **funkce** v kontextu javascriptu"
    - "pojem **proměnná** v kontextu javascriptu"
    - "pojem **parametr** v kontextu funkcí v javascriptu"
    - "pojem **návratová hodnota** v kontextu funkcí v javascriptu"
    - "pojem **literál** v kontextu javascriptu"
    - "pojem **operátor** v kontextu javascriptu"
    - "pojem **syntaxe** v kontextu javascriptu"
    - "pojem **klíčové slovo** v kontextu javascriptu"
questions: "Popište *vlastními slovy* %term%. Ilustrujte popis alespoň třemi praktickými příklady a odkažte se při vysvětlení na zdroj, z něhož jste čerpali."
rubrics:
  - checklist: Znalostní úlohy.
    items:
      - Úkol je správně zodpovězen a obsahuje 3 příklady.
  - Pokud má úloha nedostatky, uveďte zde zdroj, z něhož může autor/ka zjistit správné řešení a krátce ho okomentujte.
---
bloom: remember
count: 2
allowRepeat: question
vars:
  thing:
    - "literál"
    - "název metody"
    - "řetězec"
    - "proměnnou"
    - "definici proměnné"
    - "volání metody"
    - "parametr"
questions: "Najděte v kódu v některé z předchozích úloh **%thing%** a popište vlastními slovy k čemu slouží."
rubrics:
  - checklist: ''
    items:
      - Úkol je správně zodpovězen a obsahuje popis účelu.
  - Pokud má úloha nedostatky, uveďte zde zdroj, z něhož může autor/ka zjistit správné řešení a krátce ho okomentujte.
---
bloom: apply
input: turtle
count: 3
allowRepeat: question
vars:
  letter: [B (verzálku), C (verzálku), D (verzálku), E (verzálku), F (verzálku), G (verzálku), J (verzálku), K (verzálku), L (verzálku), M (verzálku), N (verzálku), O (verzálku), P (verzálku), Q (verzálku), R (verzálku), S (verzálku), T (verzálku), U (verzálku), V (verzálku), X (verzálku), Y (verzálku), Z (verzálku), a (minusku), b (minusku), c (minusku), d (minusku), e (minusku), f (minusku), g (minusku), j (minusku), k (minusku), l (minusku), m (minusku), n (minusku), o (minusku), p (minusku), q (minusku), r (minusku), s (minusku), t (minusku), u (minusku), v (minusku), x (minusku), y (minusku), z (minusku)]
questions: |
  Pomocí želvy nakreslete písmeno **%letter%**. Písmeno můžete nakreslit jednoduše i detailně, v libovolném stylu, ale mělo by být zcela jasně rozpoznatelné. 
  
  ### Podmínky
  
  Písmeno nakreslete tak, 
  
  - **aby se vešlo do vyznačeného rámečku** (200x150px), přičemž dolní hrana rámečku je [účaří](https://www.google.cz/search?q=%C3%BA%C4%8Da%C5%99%C3%AD) a horní hrana je horní dotažnice (střední dotažnici si můžete umístit dle libosti),
  - **aby želva skončila v pravém dolním rohu rámečku, otočená nahoru** (jako pomůcka je na konci skriptu příkaz, který vykreslí žlutou čáru, která by měla sedět s pravou hranou rámečku),
  - **celý postup vepište do funkce `letterUpperA`**, kterou přejmenujte tak, aby seděla k vašemu písmenu (`Upper` = verzálka, `Lower` = minuska, `[A-Z]` = písmeno).
  
  ### Tipy
  
  - Postupujte po kouscích: zkuste nakreslit první část písmena, spusťte kód a pokud to bude fungovat správně, pokračujte dál. Když se netrefíte, trochu upravte kód a opakujte postup.
  - Pokud potřebujete, kreslete si na papír nebo klidně „choďte jako želva“ po místnosti.
  - Nemusíte začít vlevo dole — propisku můžete vypnout nastavením `turtle.penDown = false;` a odjet se želvou tam, kam potřebujete. Začněte jednodušší částí písmene a pokračujte ke složitějším (úlohy jsou tři, vyberte si jednoduché písmeno do začátku).
  - Algoritmus můžete vytvářet od konce — pokud máte hotové celé písmeno, ale nepasuje do rámečku, stačí přidat příkazy před první kreslicí příkazy, aby se želva na začátku přesunula jinam.
  - Můžete využít funkce `repeat(n)`, pokud chcete nějakou sekvenci příkazů zopakovat n-krát. (Zkopírujte si její užití z původního kódu na řádcích 51–54).
  - Pokud chcete, kreslete písmena klidně barevná.
  - Dolní dotahy (jako např. u písmen *y* nebo *g*) zakreslete mimo rámeček, ale do plátna.
  - Mrkněte na parametry hodnocení úkolu, abyste věděli, podle čeho budou písmena hodnocena.
  
  Pro inspiraci je v předvyplněném kódu nakreslena verzálka **A**. Upravujte obsah funkce `letterUpperA` (můžete upravit i jinou část skriptu, ale písmeno musí vykreslit tato funkce).
prefill: |
  var turtle, run, h = 200, w = 150, pad = 50;

  var letterUpperA = function(t) {
    // čísla jsem postupně nahodil
    // metodou pokus/omyl
    var alfa = 20.9;
    var side = 210;
    var middle = 90;

    // levý dřík
    t.right(alfa);
    t.forward(side);
    
    // první část pravého dříku
    t.right(180-alfa*2);
    t.forward(side*3/5);

    // příčka
    t.right(90+alfa);
    t.forward(middle);
    t.back(middle);
    t.left(90+alfa);

    // druhá část pravého dříku
    t.forward(side*2/5);
    t.left(180-alfa);
  };


  /**************************************
   *                                    *
   * úpravy ve zbytku kódu nejsou nutné *
   *  upravujte funkci letterUpperA     *
   *                                    *
   **************************************/

  function repeat(n) {
    return Array.apply(null, Array(n)).map(
      function (_, i) {return i;}
    );
  }

  p.setup = function() {
    p.createCanvas(w + pad*2, h + pad*2);
    p.angleMode(p.DEGREES);

    turtle = new Turtle(p, pad, h + pad);
    run = turtle.getRun();
    
    turtle.color = 'white';
    repeat(2).forEach(function() {
      turtle.forward(h); turtle.right(90);
      turtle.forward(w); turtle.right(90);
    });

    turtle.color = 'black';
    letterUpperA(turtle);

    turtle.color = 'yellow';
    turtle.forward(h);
    turtle.right(720);
  };

  p.draw = function() {
    p.background('#ccddff');
    run.animate(5);
  };
rubrics:
  - checklist: ''
    items:
      - Funkce `letterUpperA` je správně přejmenovaná.
      - Písmeno je jasně rozpoznatelné.
      - Písmeno je uvnitř rámečku (krom dotahů).
      - Želva je v závěru vždy na správné pozici (žlutá linka se kryje s pravou hranou rámečku).
      - Při kreslení písmen jsou používány proměnné.
      - Kód obsahuje komentáře, které vysvětlují, jaká část kreslení se právě odehrává.
