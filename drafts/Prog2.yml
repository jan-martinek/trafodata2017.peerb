name: "Skriptování 2: Funkce a cykly"
goals: |
    Ve druhé lekci skriptování si zjednodušíme práci při tvobě algoritmů (naučíme se tvořit funkce) a při opakovaném vykonávání příkazů (naučíme se cykly).
reading: |
    Jako obvykle, když se vám nedaří, [zkuste to vygooglit](https://www.google.com/search?q=get+better+at+googling). Pokud se v konzoli objeví chyba javascriptu, ve většině případů najdete na internetu velmi dobrou a podrobnou odpověď. Spolehlivým serverem je [Stack Overflow](http://stackoverflow.com), jehož výskytem ve výsledcích hledání si můžete být téměř jistí. Je důležité učit se správně hledat — jaká slova přinesou rychlé řešení, jak naznačit vyhledávači, že hledáte postup anebo popis konkrétního [API](https://cs.wikipedia.org/wiki/API).
    
    Pokud byste se u něčeho zasekli, vyzkoušejte si klidně nějaký javascriptový [tutoriál](http://google.com/search?q=javascript+syntax+tutorial) — během půlhodiny vás posune dopředu. V úkolech se však postupně potkáte se všemi potřebnými syntaktickými konstrukcemi, které jsme postupně prošli i na semináři, takže by vás nemělo čekat mnoho překvapení.
    
    Stejně jako v minulé lekci: experimentujte, zkoušejte to, spouštějte nedodělané skripty a sledujte, co želva dělá. Ono se to poddá.
rubrics:
    -
        checklist: První dva příklady a popisná otázka č. 6.
        items:
            - Screenshot v prvním úkolu zobrazuje úspěšné volání funkce v konzoli.
            - Hříčka v druhém příkladu je smysluplná a funkční.
            - Kód hříčky v druhém příkladu obsahuje komentáře, které správně popisují jednotlivé části kódu.
            - Popis v úkolu č. 6 je fakticky správný.
    -
        checklist: Vločka a želví tanec.
        items:
            - Skript v úloze s vločkou je upravený a funkční.
            - Vločka má výrazně bohatší a odlišný design oproti původnímu vzoru.
            - Želva se vrací uvnitř metody `snowFlakePart(mirror)` vždy zpět tam, odkud vyjela.
            - Želví tanec je zpracovaný a skript je možné spustit.
            - Želví tanec využívá alespoň tří různých cyklů.
    -
        checklist: Psaní slova.
        items:
            - Skript je funkční a vypisuje slovo, které obsahuje alespoň pět různých znaků (**A** a **i** se nepočítají).
            - Metody obsahují parametr `size`, který je správně aplikován na všechna volání kreslicích metod. 
            - Metody jsou správně pojmenované.
            - Slovo je vypsáno správným voláním metod, které vypisují písmena, mezi nimiž je volána funkce, která vkládá mezi písmena drobnou mezeru.
    -
        checklist: Úkol č. 7 — želva běhající po ploše.
        items:
            - Skript je funkční a želva využívá nějakým způsobem celou plochu náhledového okna.
            - Skript obsahuje podmínku, která mění chování želvy v závislosti na její poloze.
    -
        checklist: Rekurze.
        items:
            - Skript je funkčí a obsahuje funkci, která rekurzivně volá sebe samotnou.
            - Skript a vykreslený výsledek je výrazně odlišný od původního příkladu v zadání.
            - Skript je podrobně okomentovaný a je jasné, co která část provádí.
preface:
---
bloom: apply
input: file
questions: |
    ### Spouštění vlastní funkce v konzoli

    Vložte do javascriptové konzole následující funkci, která umožňuje dohledat úkol, jehož součástí je konkrétní písmeno (a potvrďte vložení Enterem):
        
        function getLinks(letter) {
            var links = [];
            var letters = 'a2497b2517B2539C2497c2514d2497D2498D2501D2502D2503d2504D2512D2539d2543e2483e2491E2493E2506E2518E2521E2528f2489f2510F2514F2528F2533f2534G2500g2508g2511j2493J2494j2504J2516J2522j2530K2484K2485k2491K2496K2498k2510K2511K2513K2530K2543l2483l2485l2487L2501l2503l2513L2525L2532m2485M2487m2489M2496m2506M2508m2509m2532M2535o2484O2489o2493O2504o2515O2541P2488p2498p2506P2514P2515P2516Q2483Q2494Q2500q2502Q2517r2482R2499R2509r2515R2523R2525r2531S2482s2487s2490S2491s2500s2509S2517S2522S2528t2494T2496T2505t2516t2519t2531T2533t2533t2534T2535u2522u2532V2490x2510X2526y2482y2484Y2490Y2499y2530y2534y2535y2539Z2488Z2499Z2501z2503z2511Z2513z2523Z2525z2531Z2541z2543';
            
            var regex = new RegExp(letter + '([0-9]+)', 'g');
            var matches = letters.match(regex);
            for (var i = matches.length - 1; i >= 0; i--) {
                var link = 'http://kisk.peerblender.com/solution/' + matches[i].substr(1,4);
                links.push(link);    
            }
            
            return links;
        }
    
    A následně tuto funkci zavolejte přímo v konzoli — napište `getLinks('a')` a stiskněte Enter (můžete použít i jinou hodnotu parametru, která vrací neprázdný výsledek). Pořiďte screenshot a ten nahrejte do přílohy.
    
    > **Tip:** Takto můžete v konzoli spouštět libovolnou funkci (například hříčku z následujícího příkladu) nebo si vypsat nějakou hodnotu, kterou již skript obsahuje.
---
bloom: create
input: javascript
questions: |
    ### Generátor emocí

    Inspirujte se hříčkou předváděnou na semináři (viz převyplněný kód) a **vytvořte svou vlastní variantu, která vzbuzuje stejnou nebo jinou emoci**. Principem by mělo zůstat to, že kód vyžaduje nějaké slovo, které pak využije k nějakému vtípku.
    
    Do kódu vložte komentáře, které vysvětlují, co jednotlivé části (řádky) kódu dělají. (Popište klíčová slova, prováděné operace, volané funkce apod.)
prefill: |
    var angerGenerator = function(name) {
        return name + " smrdí!";
    };
    
    var surname = prompt("Napiš svoje příjmení:");
    var shout = angerGenerator(surname);
    
    window.alert(shout);
---
bloom: create
input: turtle
questions: |
    ### Vločky a cykly

    V následujícím kódu budeme kreslit krásnější vločku. Podobně jako při stříhání papírových vloček nemusíme kreslit každou část vločky samostatně. Namísto skládání papíru a nůžek však použijeme cyklus.
    
    Cyklus je zde připravený: prohlédněte si kód v metodě `snowFlake(preview)` a pracujte pouze s obsahem metody `snowFlakePart(mirror)`, která kreslí zrcadlovou polovinu jednoho z „cípů“ vločky. Z tohoto kousku je pak vygenerovaná celá vločka. Aby bylo možné generovat zrcadlovou část, je potřebné všechny otáčky vynásobit proměnnou `mirror` (z otočky doprava o 30 stupňů se tak stane otočka doprava o -30 stupňů, tzn. vlastně otočka doleva).
    
    ### Zadání
    
    Vytvořte vlastní design vločky pomocí funkce `snowFlakePart(mirror)`, který je výrazně bohatší a odlišný od připraveného vzoru. Jedinou podmínkou je, že na konci musí želva stát na místě, kde začínala, a dívat se stejným směrem. (Při zpracování úkolu si nicméně zkuste, jak to dopadne, když tuto podmínku nesplníte: výsledky jsou často velmi pěkné. Nejspíš to zakusíte i omylem.)
    
    Pro zjednodušení je jedna z částí vločky zvýrazněná červenou barvou: toto zvýraznění po dokončení vašeho designu vypněte (viz kód).
prefill: |
    /**************************
    Tuto část neměňte      
    **************************/
    turtle = new Turtle();
    turtle.x = window.innerWidth/2;
    turtle.y = window.innerHeight/2; 
    turtle.penDown = true;
    turtle.penColor = '#FFFFFF';
    turtle.left(360/3);

    turtle.snowFlake = function (preview) {
      for (var i = 0; i < 6; i++) {
        turtle.snowFlakePart(-1);
        if (i == 5 && preview) {
          turtle.penColor = '#FF0000';
        }
        turtle.snowFlakePart(1);
        turtle.right(360/6);
      }
    };

    /**********************************
    Následující kód kreslí část vločky.
    Měňte pouze následující část kódu.
    ***********************************/
    turtle.snowFlakePart = function(mirror) {
      turtle.forward(50);
      // výčnělek
      turtle.right(mirror*60);
      turtle.forward(30);
      turtle.back(30);
      turtle.left(mirror*60);
      // špička
      turtle.forward(30);
      // návrat zpět
      turtle.back(80);  
    };

    /* Nakonec změňte hodnotu parametru preview
    na false, aby byla celá vločka bílá */
    turtle.snowFlake(true);
---
bloom: create
input: turtle
questions: |
    ### Želví tanec

    Nyní se ujměte tvorby cyklu sami. Naučte želvu tancovat — co je to „želví tanec“, je plně na vás.
    
    Při tvorbě využijte alespoň tři různé cykly (parametricky různé, nemusí jít o různé typy cyklů) a celý tanec klidně rozdělte do více kroků (metod). Připravený kód tentokrát pouze přichystá želvu a postaví ji na střed, zbytek je na vás.
    
    ### Tipy
    
    - Nechte želvu po dobu tance kreslit, vzniknou zajímavé obrazce.
    - Zkuste pracovat s barvami. Pomocí zápisu HSL (např. `hsl(360, 100%, 50%)`) můžete vygenerovat snadno různé barvy (můžete se inspirovat předposledním příkladem, kde je taková přiřazení součástí předvyplněného kódu).
    - Zkuste využít funkce `random(x, y)`, která vrací celá čísla v rozsahu *<x; y>*.
    - Nedělejte tanec nekonečný, nevykreslí se. Nebojte se ale cyklů se stovkami až tisíci iterací — pokud nejsou vnitřně složité, neměl by to být problém.
prefill: |
    turtle = new Turtle();
    turtle.x = window.innerWidth/2;
    turtle.y = window.innerHeight/2; 
    turtle.penDown = true;
    
    turtle.dance = function() {
        // zde patří váš taneční kód
    };
    
    turtle.dance();
---
bloom: create
input: turtle
questions: |
    ### Metody: jak naučit želvu nové věci
    
    Na základě závěrečných úkolů z předchozí lekce **naučte želvu psát písmena a slova**: vezměte kód pro jednotlivá písmena a vytvořte z něj jednotlivé metody, ty pak postupně zavolejte.
    
    Využijte **všechny tři znaky**, které jste vytvořili v předchozí lekci, a vymyslete slovo (nebo dvě) skládající se z alespoň pěti *různých* znaků. Písmena, která potřebujete doplnit, dohledejte v úkolech od ostatních: můžete si pomoci funkcí `getLinks(char)`, s níž jste pracovali v prvním úkolu a která vrací odkazy na úkoly ostatních studujících, které obsahují patřičná písmena.
    
    ### Podmínky
    
    > **Tip:** Následující podmínky můžete nyní přeskočit a mrknout se na kód (a výslednou grafiku) a trochu si s ním pohrát, protože se dají odkoukat z kódu samotného. Nicméně předtím, než budete chtít vyrobit finální výsledek, projděte si je.)
    
    - Metody pojmenujte vždy `writeUpperX` pro verzálky a `writeLowerX` pro minusky (X zaměňte za dané písmeno). 
    - Do řádkového komentáře v kódu vložte adresu zdrojového úkolu, z něhož jste písmena převzali.
    - **Všechny metody tvořte s parametrem `size`, kterým vždy vynásobte parametry metod `forward()` a `back()` (viz vzorový kód).** Díky tomu budete moci výstup zvětšit či zmenšit dle potřeby.
    - Mezi písmena vkládejte drobnou mezeru pomocí metody `nextChar()`, případnou mezeru pomocí `insertSpace()`.
    - Pokud kód písmene obsahuje přebytečné horizontální mezery nebo jiné problémy, můžete kód upravit, aby byl výsledek co nejlepší.
    - Pro inspiraci želva už v předvyplněném kódu umí psát verzálku **A** a minusku **i**. Mrkněte na výstup. (Tato písmena můžete použít, ale nepočítají se do minima pěti různých znaků.)
    - Nastavte nakonec proměnnou `s` tak, aby slovo velikostně pasovalo do rámečku (měl by mít šířku 470 pixelů; pokud máte menší okno prohlížeče a náhled se vám zobrazuje pod kódem, zkontrolujte výsledek ve větším okně).
    - Kód je uspořádaný: **nejprve jsou definovány metody, následně jsou volány ve správném pořadí**. Vyzkoušejte si nejprve drobné změny ve vzorovém kódu, ať víte, která část dělá co.
    - Výsledek **nemusí** obsahovat háčky a čárky (není to nijak hodnoceno), ale pokud je budete chtít využít, nadefinujte si pro ně speciální metody.
    - Pro kontrolu obsahuje kód opět závěrečnou bílou čáru — ta by měla být svislá.
    
    ### Výstupní stav
    
    Všimněte si, že díky tomu, že měla želva v předchozí lekci jasně definovaný výstupní stav (musí skončit vpravo dole a být natočená nahoru), můžeme nyní mezi písmena snadno vložit jednoduché mezery pomocí metody `nextChar()`. Díky tomu jsou předvídatelné i případné nutné opravy (např. odstranění zbytečného horizontálního „dojezdu“ želvy).
    
    > **Pozn.:** Skutečná typografie není takto jednoduchá — mezery mezi páry písmen jsou odlišné a není je možné řešit paušálně. Nicméně na konci této lekce bude s trochou štěstí možné z jednotlivých úkolů vytáhnout funkce potřebné pro plnohodnotný život želvy druhu *Trachemys grafitta elegans*. A to není málo.
prefill: |
    /**************************
    Tuto část neměňte      
    **************************/
    var h = 170, w = 120, gray = '#AAAAAA', 
        white = '#FFFFFF', black = '#000000';
    turtle = new Turtle();
    turtle.x = 20;
    turtle.y = window.innerHeight/2+h/2;
    turtle.left(180); 

    turtle.penDown = true; 
    turtle.penColor = black;

    turtle.nextChar = function(size) {
      turtle.penDown = false;
      turtle.right(90);
      turtle.forward(size*10);
      turtle.left(90);
      turtle.penDown = true;
    };

    turtle.insertSpace = function(size) {
      for (var i = 0; i < 7; i++) {
        turtle.nextChar(size);
      }
    };

    /**********************************
    Následující kód kreslí písmeno.
    Měňte pouze následující část kódu.
    ***********************************/

    // nejprve vydefinujeme metody
    // tzn. naučíme želvu nové věci
    
    // převzato z úkolu: vzor
    turtle.writeUpperA = function(size) {
      var alfa = 19.5; 
      var middle = size*65;
      // dřík1
      turtle.right(alfa); turtle.forward(size*180);
      turtle.right(180-alfa*2);
      // dřík2.1
      turtle.forward(size*100);
      // příčka
      turtle.right(90+alfa); 
      turtle.forward(middle); turtle.back(middle); 
      turtle.left(90+alfa);
      // dřík2.2
      turtle.forward(size*80);
      turtle.left(180-alfa);
    };

    // převzato z úkolu: vzor
    turtle.writeLowerI = function(size) {
      var stemHeight = 0.5;
      var gap = 0.1;
      // dřík
      turtle.penDown = true;
      turtle.forward(size*h*stemHeight);
      // mezera
      turtle.penDown = false;
      turtle.forward(size*h*gap);
      turtle.right(90);
      // tečka
      turtle.penDown = true;
      for (var i = 0; i < 10; i++) {
        turtle.forward(1);
        turtle.left(360/10);
      }
      // návrat dolů
      turtle.penDown = false;
      turtle.left(90);
      turtle.back(size*h*(stemHeight+gap));
    };

    // tady vypíšeme slovo
    var s = 0.7; // velikost písmen
    turtle.writeUpperA(s);
    turtle.nextChar(s);
    turtle.writeLowerI(s);
    turtle.nextChar(s);
    turtle.writeUpperA(s);
    turtle.insertSpace(s);
    turtle.writeLowerI(s);
    turtle.nextChar(s);
    turtle.writeUpperA(s);

    /*************************
    A toto už zase neměňte
    **************************/
    turtle.finale = function() {
      turtle.penDown = false;
      turtle.right(90);
      turtle.forward(20);
      turtle.left(90);
      turtle.penDown = true;
      turtle.penColor = white;
      turtle.forward(h);
      turtle.penDown = false;
      turtle.forward(500);
    };
    turtle.finale();
---
bloom: apply
questions:
    - "Jaký je rozdíl mezi operátory `=` a `==`?"
    - "Jak se v javascriptu zapisují operátory *relační* a operátor *přiřazení*?"
    - "Najděte problém v *podmínkovém výrazu (uvnitř kulatých závorek)*: `if (jeHezky = true) { … }`."
    - "Popište, co je to v kontextu javascriptu *operátor přiřazení*."
    - "Popište, co jsou v kontextu javascriptu *relační operátory*."
---
bloom: create
input: turtle
questions: |
    ### Objekt `window`
    
    Podobně jako při práci se želvou můžeme při našem skriptování pracovat s oknem prohlížeče, tedy objektem `window`.
    
    - Možná jste si všimli volání metody `window.alert()` a `window.prompt()`, které říkají „Okno prohlížeče, otevři modální okno se zprávou!“, resp. „Otevři modální okno s dotazem!“.
    - Stejně tak jste mohli všimnout načítání vlastností `window.innerWidth` a `window.innerHeight`, které obsahují šířku a výšku okna v pixelech.
    
    ### Pozice želvy
    
    - Naší želvy se můžeme podobně zeptat, kde se nachází: ve vlastnostech `turtle.x` a `turtle.y` najdeme souřadnice, na nichž se nachází. (V našich úkolech je okno vždy stejně velké jako plocha, po které želva běhá. Proto je snadné zjistit, kde se želva nachází, porovnáním velikosti okna a souřadnic želvy).
    - Souřadnice začínají vlevo nahoře — `turtle.x` i `turtle.y` jsou tedy u želvy, která stojí v levém horním rohu, rovné `0`. Čím více doprava želva jde, tím větší je `turtle.x`, stejně tak pokud se pohybuje směrem dolů, zvětšuje se `turtle.y`. Je to podobné jako souřadnice v grafu, ale osa *y* je obrácená.
    
    ### Podmínkové konstrukce
    
    Ve skriptech můžeme používat tzv. podmínkové konstrukce, jejichž obdobu znáte z tabulkových procesorů a databázových dotazů. Nejznámější z nich je `if-else`: pokud je něco platné, udělej toto, a pokud ne, udělej něco jiného. V javascriptu to vypadá takto:
        
        if (něco) {
            // udělej něco
        } else {
            // udělej něco jiného
        }
    
    Ve vzorovém kódu vidíte želvu, která jde po kouscích dopředu a když se blíží k okraji, odbočí doprava. (Jde o želvu s pudem sebezáchovy.) Skript si prostudujte. (Nejdříve si projděte jeho strukturu: tzn. definované a volané metody. Následně si projděte, co dané metody dělají.)
    
    > **Pozn.:** Cyklus je omezen na 1000 opakování, aby se mohl celý proces vykreslit a neshodil prohlížeč. Jde o omezení této implementace želvy.
    
    ### Zadání
    
    **Vytvořte nějaký jiný skript, který pracuje s podmínkami a využívá celé plochy, po které želva může chodit.**
    
    ### Inspirace
    
    - Můžete kreslit obrazce, které vyplní celou plochu.
    - Můžete želvu nechat chodit a podle toho, kde se nachází, ji nechat dělat nějakou věc (např. v levé částí kreslí kolečka, v pravé čtverečky).
    - Můžete kreslit různými barvami podle toho, kde se želva nachází — ze souřadnic určete nějakou barevnou hodnotu a dosaďte ji například do barevné definice [RGB](https://www.google.cz/search?q=css+rgb) či [HSL](https://www.google.cz/search?q=css+hsl) (abyste nepřesáhli určitou hodnotu, využijte *modulo* (`%`), tedy operátor vracející zbytek dělení).    
prefill: |
    turtle = new Turtle();
    turtle.x = window.innerWidth/2;
    turtle.y = window.innerHeight/2; 
    turtle.penDown = true;

    turtle.goCarefully = function() {
      // popojdi o 10
      turtle.forward(10);
      
      // levý okraj
      if (turtle.x < 50) {
        turtle.turnInShock();
      }
      // horní okraj
      if (turtle.y < 50) {
        turtle.turnInShock();
      }
      // pravý okraj
      if (turtle.x > window.innerWidth - 50) {
        turtle.turnInShock();
      }
      // dolní okraj
      if (turtle.y > window.innerHeight - 50) {
        turtle.turnInShock();
      }  
    };

    turtle.turnInShock = function() {
      // v úleku odběhni
      turtle.back(20);
      // otoč se doprava o pořádný úhel
      turtle.right(random(85,270));
    };

    // popojdi tisíckrát
    for (var i = 0; i <= 1000; i++) {
        turtle.goCarefully();
    }
---
bloom: create
input: turtle
questions: |
    ### Rekurze
    
    Poslední úkol se týká *rekurze*, což je situace, kdy funkce volá sebe samotnou. Možná znáte *fraktály*, tedy obrazce, které jsou podobné sobě samotným. Fraktály je možné popsat pomocí rekurzivních funkcí.
    
    V příkladu níže vidíte metodu `forwardRightAndAgain()`, která želvě říká *"jeď dopředu o nějakou vzdálenost, pak zaboč a udělej to znovu s trochu větší vzdáleností"*. Výsledek je poměrně epický — zvláště, když v průběhu měníme barvu propisky.

    ### Dobrá a špatná zpráva
    
    - Rekurzivní funkce mají úžasnou vlastnost: velmi jednoduchá funkce, která sebe samu mnohokrát zavolá, může vytvořit velmi komplexní výsledky.
    - Rekurzivní funkce mají také jednu zásadní negativní vlastnost: i jednoduché funkce, které volají sebe samotné, mohou snadno zahltit sebevýkonnější počítač. Proto je důležité dobře stanovit podmínku, kdy volání skončí.
    
    > **Pozn.:** Popsaný kód obsahuje podmínku, že když by želva měla jet o více než 500 pixelů dopředu, vykašle se na to. Kdyby tam tato podmínka nebyla, želva by se snažila jet o 501, 502, 503… 1324… 1204971… pixelů atd. — což by jednak nebylo vidět a krom toho by to zahltilo počítač anebo by to prohlížeč zařízl sám. 
    > 
    > (Můj prohlížeč vykreslí třicet tisíc rekurzivních volání níže uvedené funkce poměrně snadno, ale někde u 40000 už odmítne zpracování, protože skript přesáhne povolené množství rekurzivních volání.)
    
    Vytvořte svou vlastní rekurzivní funkci a dobře ji nazvěte, aby bylo zřejmé, co dělá. Snažte se udělat funkci, která je výrazně odlišná od té, která je využita v příkladu. Výsledek popište do komentáře (přímo v kódu).
prefill: |
    turtle = new Turtle();
    turtle.x = window.innerWidth/2;
    turtle.y = window.innerHeight/2; 
    turtle.penDown = true;    

    // forwardThenRightAndAgainBigger
    turtle.forwardRightAndAgain = function(length) {
      var angle = 67;
      
      // nastavení barvy
      var hue = Math.round(length%360);
      turtle.penColor = 'hsl('+hue+', 100%, 50%)';

      // pohyb
      turtle.forward(length);
      turtle.right(angle);

      // rekurze, jen pokud je délka menší 
      // než 500 pixelů
      if (length < 500) {
        turtle.forwardRightAndAgain(length+1);
      }
    };

    turtle.forwardRightAndAgain(1);
